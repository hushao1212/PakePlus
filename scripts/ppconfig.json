{"name":"ATL1","url":"http://10.96.91.8:3232/view/dachengzhuangkuang.html?1","showName":"yichangkachenglv","appid":"com.yichangkachenglv.app","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":false,"version":"0.0.1","preview":"desktop","platform":["1-1"],"width":800,"height":600,"desc":"","jsFile":[],"filterCss":"","customJs":"console.log(\n    '%cbuild from PakePlus： https://github.com/Sjj1024/PakePlus',\n    'color:orangered;font-weight:bolder'\n)\n\n// 目标IP地址配置\nconst TARGET_IP = '10.96.91.8';\nconst TARGET_PORT = 3232; // 尝试访问的端口，可根据实际情况修改\nconst CHECK_INTERVAL = 5000; // 检查间隔时间(毫秒)\n\n// 网络状态检测\nlet networkStatus = navigator.onLine;\nlet ipAccessibility = true; // 目标IP可访问性\nlet networkAlert = null;\nlet accessibilityTimer = null;\n\n// 创建网络提示框\nfunction createNetworkAlert(message, iconClass = 'fa-wifi-slash') {\n    if (networkAlert) networkAlert.remove();\n    \n    networkAlert = document.createElement('div');\n    networkAlert.id = 'network-alert';\n    networkAlert.style.cssText = `\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        min-width: 300px;\n        max-width: 600px;\n        padding: 30px 50px;\n        font-size: 30px;\n        background-color: #ff4d4f;\n        color: white;\n        text-align: center;\n        font-weight: bold;\n        border-radius: 20px;\n        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);\n        opacity: 0;\n        transform: translate(-50%, -50%) scale(0.8);\n        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.25);\n        z-index: 9999;\n    `;\n    networkAlert.innerHTML = `<i class=\"fa ${iconClass}\" style=\"font-size: 28px; margin-right: 15px;\"></i>${message}`;\n    \n    document.body.appendChild(networkAlert);\n    \n    setTimeout(() => {\n        networkAlert.style.opacity = 1;\n        networkAlert.style.transform = 'translate(-50%, -50%) scale(1)';\n    }, 100);\n}\n\n// 移除提示框\nfunction removeNetworkAlert() {\n    if (!networkAlert) return;\n    networkAlert.style.opacity = 0;\n    networkAlert.style.transform = 'translate(-50%, -50%) scale(0.8)';\n    setTimeout(() => {\n        networkAlert.remove();\n        networkAlert = null;\n    }, 400);\n}\n\n// 网络状态变化处理\nfunction handleNetworkChange() {\n    if (navigator.onLine) {\n        console.log('%c网络已恢复', 'color:green;font-weight:bold');\n        \n        if (!networkStatus) {\n            networkStatus = true;\n            removeNetworkAlert();\n            startAccessibilityCheck(); // 网络恢复后启动IP可访问性检查\n            \n            setTimeout(() => {\n                location.reload();\n            }, 1000);\n        }\n    } else {\n        console.log('%c网络已断开', 'color:red;font-weight:bold');\n        networkStatus = false;\n        if (accessibilityTimer) clearInterval(accessibilityTimer); // 断网时停止检查\n        createNetworkAlert('网络连接已断开，请重新连接WIFI');\n    }\n}\n\n// 检查目标IP的可访问性\nasync function checkIpAccessibility() {\n    if (!networkStatus) return false; // 网络已断开，无需检查\n    \n    return new Promise(resolve => {\n        const socket = new WebSocket(`ws://${TARGET_IP}:${TARGET_PORT}`);\n        let isReachable = false;\n        \n        // 设置超时\n        const timeoutId = setTimeout(() => {\n            socket.close();\n            resolve(false);\n        }, 10000); // 3秒超时\n        \n        socket.onopen = () => {\n            isReachable = true;\n            socket.close();\n        };\n        \n        socket.onclose = () => {\n            clearTimeout(timeoutId);\n            resolve(isReachable);\n        };\n        \n        socket.onerror = () => {\n            clearTimeout(timeoutId);\n            resolve(false);\n        };\n    });\n}\n\n// 启动IP可访问性检查\nfunction startAccessibilityCheck() {\n    if (accessibilityTimer) clearInterval(accessibilityTimer);\n    \n    accessibilityTimer = setInterval(async () => {\n        const isAccessible = await checkIpAccessibility();\n        \n        if (!isAccessible && ipAccessibility) {\n            // IP从可访问变为不可访问\n            ipAccessibility = false;\n            console.log(`%c无法访问目标IP: ${TARGET_IP}`, 'color:red;font-weight:bold');\n            createNetworkAlert(`无法访问 ${TARGET_IP}，请检查网络连接或目标设备`, 'fa-exclamation-triangle');\n        } else if (isAccessible && !ipAccessibility) {\n            // IP从不可访问变为可访问\n            ipAccessibility = true;\n            console.log(`%c目标IP ${TARGET_IP} 已恢复访问`, 'color:green;font-weight:bold');\n            removeNetworkAlert();\n        }\n    }, CHECK_INTERVAL);\n    \n    console.log(`已启动目标IP ${TARGET_IP} 可访问性检测，间隔: ${CHECK_INTERVAL/1000}秒`);\n}\n\n// 页面加载时启动检查\nwindow.addEventListener('load', () => {\n    handleNetworkChange(); // 初始检查网络状态\n    if (networkStatus) startAccessibilityCheck(); // 仅在初始有网络时启动IP检查\n});\n\n// 监听网络状态变化\nwindow.addEventListener('online', handleNetworkChange);\nwindow.addEventListener('offline', handleNetworkChange);\n\n// 以下是原有的链接点击处理和定时刷新逻辑\nconst hookClick = (e) => {\n    if (!networkStatus || !ipAccessibility) return; // 网络或IP不可用时阻止链接点击\n    \n    const origin = e.target.closest('a')\n    const isBaseTargetBlank = document.querySelector(\n        'head base[target=\"_blank\"]'\n    )\n    console.log('origin', origin, isBaseTargetBlank)\n    if (\n        (origin && origin.href && origin.target === '_blank') ||\n        (origin && origin.href && isBaseTargetBlank)\n    ) {\n        e.preventDefault()\n        console.log('handle origin', origin)\n        location.href = origin.href\n    } else {\n        console.log('not handle origin', origin)\n    }\n}\n\ndocument.addEventListener('click', hookClick, { capture: true })\n\nconst refreshInterval = 60000; // 定时刷新间隔\nlet refreshTimer;\n\nfunction networkAwareRefresh() {\n    if (navigator.onLine && ipAccessibility) {\n        console.log('准备刷新页面...');\n        location.reload();\n    } else {\n        console.log('网络或IP不可用，取消刷新，等待恢复');\n    }\n}\n\nfunction startRefreshTimer() {\n    if (refreshTimer) clearInterval(refreshTimer);\n    \n    refreshTimer = setInterval(networkAwareRefresh, refreshInterval);\n    console.log(`已设置定时刷新，间隔: ${refreshInterval/1000}秒`);\n}\n\nwindow.addEventListener('load', startRefreshTimer);\nwindow.addEventListener('online', startRefreshTimer);\nwindow.addEventListener('offline', () => {\n    if (refreshTimer) {\n        clearInterval(refreshTimer);\n        console.log('网络断开，暂停定时刷新');\n    }\n});      ","isHtml":false,"htmlPath":"","htmlFiles":[],"more":{"windows":{"label":"ATL1","title":"yichangkachenglv","url":"http://10.96.91.8:3232/view/dachengzhuangkuang.html?1","userAgent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36","width":1024,"height":768,"theme":"Light","resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":800,"maxHeight":800,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":true,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]}},"ios":{"name":"ATL1","showName":"yichangkachenglv","version":"0.0.1","webUrl":"http://10.96.91.8:3232/view/dachengzhuangkuang.html?1","id":"com.yichangkachenglv.app.ios","icon":"./app-icon.png","desc":"PakePlus Project by 1024xiaoshen","pubBody":"PakePlus android build body","isHtml":false,"debug":false},"android":{"name":"ATL1","showName":"yichangkachenglv","version":"0.0.1","webUrl":"http://10.96.91.8:3232/view/dachengzhuangkuang.html?1","id":"com.yichangkachenglv.app.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"PakePlus Project by 1024xiaoshen","pubBody":"PakePlus android build body","isHtml":false,"debug":false},"desktop":{"name":"ATL1","showName":"yichangkachenglv","version":"0.0.1","id":"com.yichangkachenglv.app.desktop","desc":"PakePlus Project by 1024xiaoshen","webUrl":"http://10.96.91.8:3232/view/dachengzhuangkuang.html?1","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"PakePlus desktop build body","isHtml":false,"single":true,"state":true,"injectJq":true,"tauriApi":true,"debug":false}}